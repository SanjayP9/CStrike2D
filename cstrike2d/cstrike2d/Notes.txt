- Notes -
- This text file can be used for pretty much anything.
- It is recommended to state any important information regarding the implementation of your classes
- For example, if someone wants to implement one of your abstract classes, the structure and guidelines should be listed here
- Also general guidelines for View code as well as Model code should be noted here as well
- Dec 23rd - Mark Voong

----------------------------------------------------------------------------------------------------------------------------------------------

- General Guidelines for model/logic classes -
-- When performing calculations that occur over a time span (Movement, velocity, etc),
-- all calculations should be multiplied with the gameTime variable. Keep in mind at the driver model class (CStrikeModel.cs)
-- the gameTime variable is divided by 1000 to convert the milliseconds into seconds. This will affect stuff like movement speed and other
-- constants.

- General Guidelines for view/draw classes -
-- Draw order is important. As of now the only draw order implementation is per class. Drawing inside the class will be from top to bottom,
-- however, that entire component may be drawn in a different order when the entire game is drawn.

- General coding guidelines -
-- Properties are preferred but not required. (Such as private fields)
-- Documentation should be lighter than the last project unless it is a critical component (Collision Detection)

- How to use the Assets and AssetLoader class -
-- If you require content during one of your draw calls, the Assets class is passed as one of the parameters. This class contains all required
-- assets such as fonts, textures, and sounds. Your view implementation SHOULD NOT have any fields regarding content, all content should be
-- retrieved via public properties in the asset class. In order to load an asset to be usable, the following must happen

-- There are three content pipelines you should be using
-- 1. coreContentLoader - Contains assets such as fonts and UI elements. This is loaded immediately at the start and is never unloaded
-- 2. mapContentLoader - Contains assets such as tilesets, minimap displays, and map sounds. This is loaded when the player connects
-- 3. gameContentLoader - Contains assets such as weapons, playermodels, particles



Server:

Network Related:
SyncObjects()


ServerWeapon
ServerPlayer
ServerGrenade
ServerBomb

SpawnWeapon(Vector2 location, ServerWeapon weapon)
SpawnPlayer(Vector2 location, short playerID)
SpawnGrenade(Vector2 location, ServerGrenade grenade)
PlantBomb(Vector2 location, bool aSite)
RoundStart()
RoundEnd()


Client:

ClientWeapon
ClientPlayer
ClientGrenade
ClientBomb

SyncObjects()




Steps:
1. PLAYER connects to the server, if the server exists sends byte HANDSHAKE

2. SERVER recieves HANDSHAKE byte, gives player unique identifier, sychronizes all
existing entities on the server with the new player
Entities Include:
-Other players
-Grenades
-Bomb
-Player weapons
-Dropped weapons

The server also creates a new player instance for the connected player, with the default properties
- Not Collidable
- Position does not update unless they spawn, default Vector2.Zero
- Default the team to TEAM_SPECTATOR
- Associate player with their in-game name which is different from the identifier

when SERVER is done synchronizing, SERVER sends byte HANDSHAKE_COMPLETE

3. PLAYER recieves HANDHAKE_COMPLETE byte, can now change gamestate to 
connected.

4. if SERVER is empty, does nothing and waits for the PLAYER to select a team

5. PLAYER selects a team CLIENTSIDE, when a team is selected, byte CHANGE_TEAM is
sent to the SERVER, along with any of the following bytes
- byte TEAM_COUNTER_TERRORIST
- byte TEAM_TERRORIST
- byte TEAM_SPECTATOR

6. SERVER recieves byte CHANGE_TEAM, correctly changes the player to the selected team.
If a round is currently in progress, the player will start as PlayerState.Dead and must wait
until StartRound occurs.






StartRound()
{
Vector2[] tSpawnPoints;

List<Vector2> spawnPoints = tSpawnPoints.ToList();

int index = rand.Next(0, spawnPoints.Count);

for (int i = 0; i < terrorists; i++)
{
	SpawnPlayer(spawnPoints[index], playerID);

	spawnPoints.RemoveAt(index);
}
}